---
apiVersion: v1
kind: Service
metadata:
  name: gomuks
  namespace: @namespace@
  labels:
    app.kubernetes.io/name: gomuks
    app.kubernetes.io/instance: gomuks
  annotations:
    tailscale.com/expose: "true"
    tailscale.com/hostname: "gomuks"
    tailscale.com/tags: "tag:http"
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
  selector:
    app.kubernetes.io/name: gomuks
    app.kubernetes.io/instance: gomuks
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: gomuks-data
  namespace: @namespace@
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: local-path
  resources:
    requests:
      storage: 50Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gomuks
  namespace: @namespace@
  labels:
    app.kubernetes.io/name: gomuks
    app.kubernetes.io/instance: gomuks
spec:
  strategy:
    type: Recreate
  replicas: @replicas@
  selector:
    matchLabels:
      app.kubernetes.io/name: gomuks
      app.kubernetes.io/instance: gomuks
  template:
    metadata:
      labels:
        app.kubernetes.io/name: gomuks
        app.kubernetes.io/instance: gomuks
    spec:
      containers:
        - name: gomuks
          image: "@image@"
          imagePullPolicy: IfNotPresent
          # first run: uncomment the next two lines and run `gomuks` to generate config, edit `/data/config/config.yaml`
          #command: [ "/bin/ash", "-c", "--" ]
          #args: [ "while true; do sleep 30; done;" ]
          ports:
            - name: http
              containerPort: 29325
              protocol: TCP
          livenessProbe:
            tcpSocket:
              port: http
          readinessProbe:
            tcpSocket:
              port: http
          volumeMounts:
            - name: gomuks-data
              mountPath: /data
          resources: {}
      volumes:
        - name: gomuks-data
          persistentVolumeClaim:
            claimName: gomuks-data
