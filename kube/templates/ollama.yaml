---
apiVersion: v1
kind: Service
metadata:
  name: ollama
  namespace: @namespace@
  labels:
    app.kubernetes.io/name: ollama
    app.kubernetes.io/instance: ollama
  annotations:
    tailscale.com/expose: "true"
    tailscale.com/hostname: "ollama"
    tailscale.com/tags: "tag:ollama"
spec:
  type: ClusterIP
  ports:
    - port: 11434
      targetPort: ollama
      protocol: TCP
      name: ollama
  selector:
    app.kubernetes.io/name: ollama
    app.kubernetes.io/instance: ollama
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ollama
  namespace: @namespace@
  labels:
    app.kubernetes.io/name: ollama
    app.kubernetes.io/instance: ollama
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: ollama
      app.kubernetes.io/instance: ollama
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ollama
        app.kubernetes.io/instance: ollama
    spec:
      securityContext:
        {}
      runtimeClassName: nvidia
      containers:
        - name: ollama
          securityContext:
            {}
          image: "@image@"
          imagePullPolicy: IfNotPresent
          ports:
            - name: ollama
              containerPort: 11434
              protocol: TCP
          volumeMounts:
            - name: ollama
              mountPath: /root/.ollama
          resources:
            requests:
              nvidia.com/gpu-all: "1"
            limits:
              nvidia.com/gpu-all: "1"
      volumes:
      - name: ollama
        hostPath:
          path: @hostfolder@
          type: Directory
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: ollama-pull
  namespace: @namespace@
data:
  ollama-pull.sh: |-
    #!/usr/bin/env bash
    ## Models I always need
    models=("llama3:8b" "llama3.1:8b" "deepseek-coder:6.7b" "mistral:7b" "gemma3:4b" "qwen3:8b")
    for model in "${models[@]}"
    do
      ollama pull "${model}"
    done

    ## Pull latest of existing models
    ollama list | awk '{print $1}' | xargs -I {} ollama pull "{}"
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: ollama-pull
  namespace: @namespace@
spec:
  schedule: "0 0 * * *"
  jobTemplate:
    spec:
      template:
        spec:
          containers:
            - name: ollama-pull
              image: "@image@"
              imagePullPolicy: IfNotPresent
              command: ["/bin/bash", "-c"]
              args: [
                "/ollama-pull.sh"
              ]
              env:
                - name: OLLAMA_HOST
                  value: "ollama.@namespace@.svc.cluster.local:11434"
              volumeMounts:
                - name: ollama-pull
                  mountPath: /ollama-pull.sh
                  subPath: ollama-pull.sh
          restartPolicy: OnFailure
          volumes:
            - name: ollama-pull
              configMap:
                name: ollama-pull
                defaultMode: 0777

